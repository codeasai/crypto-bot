"""
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Binance API ‡∏ú‡πà‡∏≤‡∏ô CCXT
"""

import os
import time
import ccxt
import logging
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á root directory
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

from config.config import BINANCE_CONFIG, BASE_URL, STREAM_URL, TESTNET
from config.credentials import API_KEY, API_SECRET
from utils.logger import setup_logger
from utils.APIKeyValidator import APIKeyValidator

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger
logger = setup_logger('binance_api')

class BinanceAPI:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Binance API ‡∏ú‡πà‡∏≤‡∏ô CCXT
    """
    
    def __init__(self, symbol=None, testnet=True):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Binance API
        
        Args:
            symbol (str): ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡πÄ‡∏ä‡πà‡∏ô 'BTCUSDT' ‡∏´‡∏£‡∏∑‡∏≠ 'BTC/USDT')
            testnet (bool): ‡πÉ‡∏ä‡πâ testnet ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        self.symbol = symbol
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö symbol ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (BTC/USDT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CCXT)
        if symbol and '/' in symbol:
            self.ccxt_symbol = symbol
        elif symbol:
            self.ccxt_symbol = f"{symbol[:-4]}/{symbol[-4:]}" if len(symbol) > 4 else symbol
        else:
            self.ccxt_symbol = None
            
        self.testnet = testnet
        self.api_key = API_KEY
        self.api_secret = API_SECRET
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á APIKeyValidator
        self.validator = APIKeyValidator(
            api_key=self.api_key,
            api_secret=self.api_secret,
            base_url=BASE_URL
        )
        
        # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        if not self.validator.sync_time():
            logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ")
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key
        if not self.validator.validate_api_key():
            logger.error("API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Binance Exchange ‡∏î‡πâ‡∏ß‡∏¢ CCXT
        config = {
            'apiKey': self.api_key,
            'secret': self.api_secret,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot',
                'testnet': testnet,
                'adjustForTimeDifference': True,
                'recvWindow': 60000
            }
        }
        
        if testnet:
            config['urls'] = {
                'api': {
                    'public': BASE_URL,
                    'private': BASE_URL,
                }
            }
        
        self.exchange = ccxt.binance(config)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ testnet
        if testnet:
            self.exchange.set_sandbox_mode(True)
        
        logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô BinanceAPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol} ‡∏ö‡∏ô {'Testnet' if testnet else 'Live'}")
    
    def _sync_time_if_needed(self):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        
        Returns:
            bool: True ‡∏´‡∏≤‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå, False ‡∏´‡∏≤‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        return self.validator.sync_time()
        
    def _validate_request(self):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥ request
        
        Returns:
            bool: True ‡∏´‡∏≤‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥ request, False ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
        """
        if not self._sync_time_if_needed():
            logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ")
            return False
        return True
    
    def get_exchange_info(self):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á exchange
        
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á exchange
        """
        try:
            markets = self.exchange.fetch_markets()
            return {market['symbol']: market for market in markets}
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• exchange: {e}")
            return {}
    
    def get_ticker(self):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        """
        try:
            if not self.ccxt_symbol:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol")
                
            ticker = self.exchange.fetch_ticker(self.ccxt_symbol)
            return {
                'lastPrice': ticker['last'],
                'bid': ticker['bid'],
                'ask': ticker['ask'],
                'volume': ticker['baseVolume']
            }
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤: {e}")
            return {'lastPrice': '0'}
    
    def get_klines(self, interval, limit=500, start_time=None, end_time=None):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        
        Args:
            interval (str): ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (1m, 5m, 15m, 1h, 4h, 1d)
            limit (int): ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            start_time (int): ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (timestamp in milliseconds)
            end_time (int): ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (timestamp in milliseconds)
            
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        """
        try:
            if not self.ccxt_symbol:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol")
                
            # ‡πÅ‡∏õ‡∏•‡∏á interval ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á CCXT
            timeframe_map = {
                '1m': '1m', '5m': '5m', '15m': '15m',
                '1h': '1h', '4h': '4h', '1d': '1d'
            }
            timeframe = timeframe_map.get(interval, '1h')
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
            params = {
                'limit': limit
            }
            
            if start_time:
                params['startTime'] = start_time
            if end_time:
                params['endTime'] = end_time
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            ohlcv = self.exchange.fetch_ohlcv(
                symbol=self.ccxt_symbol,
                timeframe=timeframe,
                params=params
            )
            
            if not ohlcv:
                logger.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.ccxt_symbol}")
                return []
                
            return ohlcv
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: {e}")
            return []
    
    def get_account_info(self):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        """
        try:
            if not self._validate_request():
                return {'total': {}}
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if not self.exchange.has['fetchBalance']:
                raise Exception("‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            balance = self.exchange.fetch_balance()
            
            if not balance or 'total' not in balance:
                logger.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
                return {'total': {}}
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
            logger.info("\nüí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:")
            logger.info("-" * 50)
            for currency, amount in balance['total'].items():
                if amount > 0:
                    logger.info(f"{currency}: {amount}")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            logger.info("\n‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:")
            logger.info("-" * 50)
            logger.info(f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {self.exchange.options['defaultType']}")
            logger.info(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {'‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if self.exchange.has['fetchBalance'] else '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'}")
            
            return balance
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return {'total': {}}
    
    def create_order(self, **params):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
        
        Args:
            **params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (symbol, side, type, quantity, price, ...)
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        """
        try:
            if not self._validate_request():
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ request ‡πÑ‡∏î‡πâ")
                
            symbol = params.get('symbol', self.ccxt_symbol)
            if not symbol:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol")
                
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô CCXT
            order = self.exchange.create_order(
                symbol=symbol,
                type=params.get('type', 'limit').lower(),
                side=params.get('side', 'buy').lower(),
                amount=params.get('quantity'),
                price=params.get('price'),
                params={
                    'timeInForce': params.get('timeInForce', 'GTC')
                } if params.get('type', 'limit').lower() == 'limit' else {}
            )
            
            return order
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            raise
    
    def get_open_orders(self, symbol=None):
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        
        Args:
            symbol (str): ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
            
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        """
        try:
            if not self._validate_request():
                return []
                
            symbol = symbol or self.ccxt_symbol
            return self.exchange.fetch_open_orders(symbol)
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {e}")
            return []
    
    def cancel_order(self, **params):
        """
        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        
        Args:
            **params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (symbol, orderId, ...)
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        """
        try:
            if not self._validate_request():
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ request ‡πÑ‡∏î‡πâ")
                
            symbol = params.get('symbol', self.ccxt_symbol)
            order_id = params.get('orderId')
            
            if not symbol or not order_id:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol ‡πÅ‡∏•‡∏∞ orderId")
                
            return self.exchange.cancel_order(order_id, symbol)
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            raise
    
    def get_order(self, **params):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        
        Args:
            **params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (symbol, orderId, ...)
            
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        """
        try:
            if not self._validate_request():
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ request ‡πÑ‡∏î‡πâ")
                
            symbol = params.get('symbol', self.ccxt_symbol)
            order_id = params.get('orderId')
            
            if not symbol or not order_id:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol ‡πÅ‡∏•‡∏∞ orderId")
                
            return self.exchange.fetch_order(order_id, symbol)
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            raise
    
    def get_all_orders(self, **params):
        """
        ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Args:
            **params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå (symbol, limit, ...)
            
        Returns:
            list: ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        """
        try:
            if not self._validate_request():
                return []
                
            symbol = params.get('symbol', self.ccxt_symbol)
            
            if not symbol:
                raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol")
                
            return self.exchange.fetch_orders(
                symbol,
                limit=params.get('limit'),
                since=params.get('startTime'),
                params={'endTime': params.get('endTime')} if params.get('endTime') else None
            )
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
            return []


if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô BinanceAPI
    binance_api = BinanceAPI(symbol='BTC/USDT', testnet=True)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• exchange
    exchange_info = binance_api.get_exchange_info()
    print(f"Exchange Info: {len(exchange_info)} markets")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    ticker = binance_api.get_ticker()
    print(f"Last Price: {ticker['lastPrice']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
    klines = binance_api.get_klines(interval='1h', limit=10)
    print(f"Klines: {len(klines)}")
    if klines:
        print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô:")
        for k in klines[:2]:
            print(f"‡πÄ‡∏ß‡∏•‡∏≤: {k[0]}, ‡πÄ‡∏õ‡∏¥‡∏î: {k[1]}, ‡∏™‡∏π‡∏á: {k[2]}, ‡∏ï‡πà‡∏≥: {k[3]}, ‡∏õ‡∏¥‡∏î: {k[4]}, ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì: {k[5]}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_info = binance_api.get_account_info()
    print(f"Account Info: {account_info.keys() if isinstance(account_info, dict) else 'Not a dict'}")