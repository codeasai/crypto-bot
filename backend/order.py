from binance.client import Client
from config.credentials import API_KEY, API_SECRET
import time
from datetime import datetime

class Order:
    def __init__(self):
        self.client = Client(API_KEY, API_SECRET, testnet=True)
        self.order_count = 0
        self.max_orders = 5
        self.orders = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        
    def get_balance(self, asset='USDT'):
        """‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        try:
            balance = self.client.get_asset_balance(asset=asset)
            return {
                'asset': balance['asset'],
                'free': float(balance['free']),
                'locked': float(balance['locked'])
            }
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ: {str(e)}")
            return None
            
    def check_balance(self, symbol, quantity):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            ticker = self.client.get_symbol_ticker(symbol=symbol)
            current_price = float(ticker['price'])
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
            total_value = current_price * quantity
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î USDT
            usdt_balance = self.get_balance('USDT')
            if not usdt_balance:
                return False
                
            if usdt_balance['free'] < total_value:
                print(f"‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {total_value:.2f} USDT ‡πÅ‡∏ï‡πà‡∏°‡∏µ {usdt_balance['free']:.2f} USDT")
                return False
                
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ: {str(e)}")
            return False
            
    def place_market_order(self, symbol, side, quantity):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            if self.order_count >= self.max_orders:
                print(f"‚ö†Ô∏è ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ({self.max_orders} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)")
                return None
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            if not self.check_balance(symbol, quantity):
                return None
                
            if side.upper() == 'BUY':
                order = self.client.order_market_buy(symbol=symbol, quantity=quantity)
            else:
                order = self.client.order_market_sell(symbol=symbol, quantity=quantity)
                
            self.order_count += 1
            order_info = {
                'order_id': order['orderId'],
                'symbol': order['symbol'],
                'side': order['side'],
                'quantity': float(order['origQty']),
                'status': order['status'],
                'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            self.orders.append(order_info)
            return order_info
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ: {str(e)}")
            return None
            
    def get_order_status(self, symbol, order_id):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        try:
            order = self.client.get_order(symbol=symbol, orderId=order_id)
            return {
                'order_id': order['orderId'],
                'symbol': order['symbol'],
                'side': order['side'],
                'quantity': float(order['origQty']),
                'price': float(order['price']),
                'status': order['status'],
                'time': order['time']
            }
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: {str(e)}")
            return None
            
    def reset_order_count(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        self.order_count = 0
        self.orders = []
        print("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
    def get_recent_orders(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        return self.orders

def main():
    order = Order()
    print("\nü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ BTC...")
    print("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    
    try:
        while True:
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ BTC
            result = order.place_market_order('BTCUSDT', 'BUY', 0.001)
            if result:
                print(f"\nüìä ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                print(f"ID: {result['order_id']}")
                print(f"‡∏Ñ‡∏π‡πà: {result['symbol']}")
                print(f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {result['side']}")
                print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {result['quantity']}")
                print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {result['status']}")
                print(f"‡πÄ‡∏ß‡∏•‡∏≤: {result['time']}")
                
            # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            time.sleep(10)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            if order.order_count >= order.max_orders:
                order.reset_order_count()
            
    except KeyboardInterrupt:
        print("\n\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    main() 