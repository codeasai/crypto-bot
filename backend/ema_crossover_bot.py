import ccxt
import pandas as pd
import numpy as np
import time
from config import TESTNET_API_KEY, TESTNET_API_SECRET

class BinanceBot:
    def __init__(self, config=None):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        default_config = {
            'symbol': 'BTC/USDT',
            'timeframe': '5m',
            'risk_per_trade': 0.01,  # 1% ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            'short_period': 12,
            'long_period': 26,
            'check_interval': 10,  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            'max_orders': 10,  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (buy/sell)
            'min_order_value': 10,  # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πà‡∏≠ order (USDT)
        }

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å config ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.config = default_config
        if config:
            self.config.update(config)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Binance Testnet
        self.exchange = ccxt.binance({
            'apiKey': TESTNET_API_KEY,
            'secret': TESTNET_API_SECRET,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot',
                'testnet': True,
                'adjustForTimeDifference': True,
            },
            'urls': {
                'api': {
                    'public': 'https://testnet.binance.vision/api/v3',
                    'private': 'https://testnet.binance.vision/api/v3',
                }
            }
        })
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders
        self.order_counts = {
            'BUY': 0,
            'SELL': 0
        }
        self.last_reset_time = time.time()
        self.reset_interval = 24 * 60 * 60  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

    def reset_order_counts(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤"""
        current_time = time.time()
        if current_time - self.last_reset_time >= self.reset_interval:
            self.order_counts = {'BUY': 0, 'SELL': 0}
            self.last_reset_time = current_time
            print("\nüîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders ‡πÅ‡∏•‡πâ‡∏ß")

    def fetch_data(self, limit=100):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
        try:
            ohlcv = self.exchange.fetch_ohlcv(self.config['symbol'], self.config['timeframe'], limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            return df
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
            return None

    def calculate_ema(self, df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA"""
        df['ema_12'] = df['close'].ewm(span=self.config['short_period'], adjust=False).mean()
        df['ema_26'] = df['close'].ewm(span=self.config['long_period'], adjust=False).mean()
        return df

    def check_signals(self, df):
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢"""
        signal = None
        if df['ema_12'].iloc[-2] < df['ema_26'].iloc[-2] and df['ema_12'].iloc[-1] > df['ema_26'].iloc[-1]:
            if self.order_counts['BUY'] < self.config['max_orders']:
                signal = "BUY"
        elif df['ema_12'].iloc[-2] > df['ema_26'].iloc[-2] and df['ema_12'].iloc[-1] < df['ema_26'].iloc[-1]:
            if self.order_counts['SELL'] < self.config['max_orders']:
                signal = "SELL"
        return signal

    def calculate_position_size(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            balance = self.exchange.fetch_balance()
            usdt_balance = float(balance['USDT']['free'])
            current_price = self.exchange.fetch_ticker(self.config['symbol'])['last']
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô BTC ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ risk_per_trade
            risk_amount = usdt_balance * self.config['risk_per_trade']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            if risk_amount < self.config['min_order_value']:
                print(f"‚ö†Ô∏è ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {self.config['min_order_value']} USDT")
                return None
                
            btc_amount = risk_amount / current_price
            
            # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö min lot size ‡∏Ç‡∏≠‡∏á Binance
            btc_amount = round(btc_amount, 6)  # Binance ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 6 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            
            return btc_amount
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ: {str(e)}")
            return None

    def place_order(self, order_type):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders
            if self.order_counts[order_type] >= self.config['max_orders']:
                print(f"‚ö†Ô∏è ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {order_type} orders ‡πÅ‡∏•‡πâ‡∏ß ({self.config['max_orders']})")
                return False

            amount = self.calculate_position_size()
            if amount is None:
                return False

            print(f"\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {order_type}...")
            print(f"üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {amount} BTC")

            if order_type == "BUY":
                order = self.exchange.create_market_buy_order(self.config['symbol'], amount)
            else:  # SELL
                order = self.exchange.create_market_sell_order(self.config['symbol'], amount)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders
            self.order_counts[order_type] += 1
            print(f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order['id']}")
            print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {order_type} ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.config['max_orders'] - self.order_counts[order_type]}")
            return True

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ: {str(e)}")
            return False

    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Bot"""
        print(f"\nü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Bot...")
        print(f"üìä ‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î: {self.config['symbol']}")
        print(f"‚è±Ô∏è Timeframe: {self.config['timeframe']}")
        print(f"üí∞ Risk per trade: {self.config['risk_per_trade'] * 100}%")
        print(f"‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å: {self.config['check_interval']} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"üîí ‡∏à‡∏≥‡∏Å‡∏±‡∏î Orders: {self.config['max_orders']} ‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        print(f"üíµ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {self.config['min_order_value']} USDT")

        while True:
            try:
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô orders ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                self.reset_order_counts()

                # ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                df = self.fetch_data()
                if df is not None:
                    df = self.calculate_ema(df)
                    signal = self.check_signals(df)

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    current_price = df['close'].iloc[-1]
                    print(f"\n‚è∞ {pd.Timestamp.now()}")
                    print(f"üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${current_price:,.2f}")
                    print(f"üìà EMA{self.config['short_period']}: ${df['ema_12'].iloc[-1]:,.2f}")
                    print(f"üìâ EMA{self.config['long_period']}: ${df['ema_26'].iloc[-1]:,.2f}")
                    print(f"üìä Orders - BUY: {self.order_counts['BUY']}/{self.config['max_orders']}, SELL: {self.order_counts['SELL']}/{self.config['max_orders']}")

                    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
                    if signal:
                        print(f"\nüéØ ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì {signal}!")
                        self.place_order(signal)

                # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                time.sleep(self.config['check_interval'])

            except KeyboardInterrupt:
                print("\n\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Bot...")
                break
            except Exception as e:
                print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                time.sleep(self.config['check_interval'])

if __name__ == "__main__":
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ config (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
    custom_config = {
        'check_interval': 10,  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        'max_orders': 10,      # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 orders ‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        'min_order_value': 10  # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 USDT
    }
    
    bot = BinanceBot(custom_config)
    bot.run() 