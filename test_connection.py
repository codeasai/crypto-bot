import ccxt
import time
from config import TESTNET_API_KEY, TESTNET_API_SECRET

def format_balance(value):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
    return f"{float(value):.8f}".rstrip('0').rstrip('.')

def test_binance_connection():
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Binance instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testnet
        exchange = ccxt.binance({
            'apiKey': TESTNET_API_KEY,
            'secret': TESTNET_API_SECRET,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot',  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô spot trading
                'testnet': True,
                'adjustForTimeDifference': True,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö timestamp ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            },
            'urls': {
                'api': {
                    'public': 'https://testnet.binance.vision/api/v3',
                    'private': 'https://testnet.binance.vision/api/v3',
                }
            }
        })

        # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö server
        exchange.load_time_difference()
        print("\n=== Server Time Sync ===")
        print(f"Time difference with server: {exchange.options['timeDifference']} ms")

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• portfolio
        print("\n=== Account Portfolio (Top 5) ===")
        balance = exchange.fetch_balance()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á currencies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
        non_zero_balances = []
        for currency in balance['total']:
            if float(balance['total'][currency]) > 0:
                non_zero_balances.append({
                    'currency': currency,
                    'free': balance['free'][currency],
                    'used': balance['used'][currency],
                    'total': balance['total'][currency]
                })
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        sorted_balances = sorted(non_zero_balances, 
                               key=lambda x: float(x['total']), 
                               reverse=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Top 5 Balance
        print("\nüìä Top 5 Balance:")
        print("-" * 50)
        for idx, bal in enumerate(sorted_balances[:5], 1):
            print(f"#{idx} {bal['currency']}:")
            print(f"  üí∞ Available: {format_balance(bal['free'])}")
            print(f"  üîí In Order: {format_balance(bal['used'])}")
            print(f"  üìà Total: {format_balance(bal['total'])}")
            print("-" * 50)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á BTC/USDT
        ticker = exchange.fetch_ticker('BTC/USDT')
        btc_price = ticker['last']
        print(f"\nüîÑ Current BTC/USDT Price: ${btc_price:,.2f}")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Open Orders
        open_orders = exchange.fetch_open_orders('BTC/USDT')
        if open_orders:
            print("\nüìù Open Orders:")
            print("-" * 50)
            for order in open_orders:
                print(f"Order ID: {order['id']}")
                print(f"Type: {order['type'].upper()} {order['side'].upper()}")
                print(f"Price: ${float(order['price']):,.2f}")
                print(f"Amount: {order['amount']} {order['symbol'].split('/')[0]}")
                print("-" * 50)
        else:
            print("\nüìù No Open Orders")

        return True

    except Exception as e:
        print(f"\nError: {str(e)}")
        if "Invalid API-key" in str(e):
            print("\n‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            print("1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://testnet.binance.vision/")
            print("2. ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ GitHub")
            print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà")
            print("4. ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Enable Reading ‡πÅ‡∏•‡∏∞ Enable Spot & Margin Trading")
            print("5. ‡∏ô‡∏≥ API Key ‡πÅ‡∏•‡∏∞ Secret ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config.py")
        elif "Timestamp" in str(e):
            print("\n‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ Internet")
            print("2. ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return False

if __name__ == "__main__":
    print("Testing Binance Testnet Connection...")
    if test_binance_connection():
        print("\nConnection test successful! ‚úÖ")
    else:
        print("\nConnection test failed! ‚ùå") 