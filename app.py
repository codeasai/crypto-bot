"""
Streamlit GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Crypto Trading Bot
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import json
import sys
from pathlib import Path
import threading
import queue
import glob
import plotly.graph_objects as go
import shutil

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á root directory
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable
os.environ["PYTHONPATH"] = str(current_dir)

from scripts.train_agent import train_dqn_agent, evaluate_model
from agents.dqn_agent import DQNAgent
from environment.trading_env import CryptoTradingEnv
from data.data_processor import DataProcessor

class Navigator:
    def __init__(self):
        self.pages = {
            "üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å": self.home_page,
            "üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•": self.data_overview_page,
            "ü§ñ ‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•": self.model_training_page,
            "üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•": self.model_evaluation_page,
            "üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á": self.backtest_page,
            "üíπ ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå": self.live_trading_page,
            "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤": self.settings_page
        }
        
        # ‡πÇ‡∏´‡∏•‡∏î CSS
        self.load_css()
        
    def load_css(self):
        """‡πÇ‡∏´‡∏•‡∏î CSS ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        css_file = Path(current_dir) / "dashboard" / "assets" / "css" / "style.css"
        if css_file.exists():
            with open(css_file) as f:
                st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
        
    def render(self):
        st.sidebar.title("ü§ñ Crypto Trading Bot")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ
        logo_path = Path(current_dir) / "dashboard" / "assets" / "img" / "logo.png"
        if logo_path.exists():
            st.sidebar.image(str(logo_path), width=100)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selected_page = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", list(self.pages.keys()))
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.pages[selected_page]()
        
    def home_page(self):
        st.title("üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å")
        st.markdown("""
        ### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
        ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
        - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        - ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
        - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        - ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
        - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "3")
        with col2:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", "1,234")
        with col3:
            st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞", "65%")
            
    def data_overview_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        st.title("üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
        @st.cache_data
        def load_data():
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
            raw_data_path = Path(current_dir) / "data" / "datasets"
            raw_files = glob.glob(str(raw_data_path / "*.csv"))
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
            processed_data_path = Path(current_dir) / "data" / "features"
            processed_files = glob.glob(str(processed_data_path / "processed_features_*.csv"))
            
            return raw_files, processed_files

        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        raw_files, processed_files = load_data()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Raw Market Data")
            if raw_files:
                for file in raw_files:
                    file_name = Path(file).name
                    st.write(f"- {file_name}")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
                
        with col2:
            st.subheader("üîß Processed Features")
            if processed_files:
                for file in processed_files:
                    file_name = Path(file).name
                    st.write(f"- {file_name}")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if raw_files:
            first_file = raw_files[0]
            df = pd.read_csv(first_file)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # Sidebar filters
            st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå symbol ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 'symbol' in df.columns:
                symbol = st.sidebar.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
                    ["BTC/USDT"]  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                )
                df_filtered = df[df['symbol'] == symbol.replace('/', '')]
            else:
                df_filtered = df  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå symbol

            timeframe = st.sidebar.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                ["5m"]  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeframe ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            )

            # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô: Raw Market Data ‡πÅ‡∏•‡∏∞ Processed Features
            tab1, tab2 = st.tabs(["üìà Raw Market Data", "üîß Processed Features"])

            with tab1:
                st.subheader("Raw Market Data")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
                st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å Exchange")
                st.dataframe(df_filtered.head(), use_container_width=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤
                fig = go.Figure(data=[go.Candlestick(
                    x=df_filtered['timestamp'],
                    open=df_filtered['open'],
                    high=df_filtered['high'],
                    low=df_filtered['low'],
                    close=df_filtered['close']
                )])
                
                fig.update_layout(
                    title="Price Chart",
                    yaxis_title="Price (USDT)",
                    xaxis_title="Date",
                    height=600,
                    template="plotly_dark"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
                    latest_price = df_filtered['close'].iloc[-1]
                    price_change = df_filtered['close'].iloc[-1] - df_filtered['close'].iloc[0]
                    price_change_pct = (price_change / df_filtered['close'].iloc[0]) * 100
                    
                    stats = {
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô": f"{latest_price:,.2f} USDT",
                        "‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á": f"{price_change:+,.2f} USDT ({price_change_pct:+.2f}%)",
                        "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î 24h": f"{df_filtered['volume'].sum():,.2f} USDT",
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î": f"{df_filtered['high'].max():,.2f} USDT",
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î": f"{df_filtered['low'].min():,.2f} USDT"
                    }
                    
                    for key, value in stats.items():
                        st.metric(key, value)
                        
                with col2:
                    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î")
                    market_data = pd.DataFrame({
                        "Exchange": ["Binance"],
                        "Price": [f"{latest_price:,.2f}"],
                        "Volume": [f"{df_filtered['volume'].sum():,.2f}"],
                        "Spread": [f"{((df_filtered['high'] - df_filtered['low']) / df_filtered['low'] * 100).mean():.2f}%"]
                    })
                    st.dataframe(market_data, use_container_width=True)

            with tab2:
                st.subheader("Processed Features")
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
                if processed_files:
                    selected_processed_file = st.selectbox(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß",
                        processed_files,
                        format_func=lambda x: Path(x).name
                    )
                    
                    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
                    processed_data = pd.read_csv(selected_processed_file)
                    processed_data['timestamp'] = pd.to_datetime(processed_data['timestamp'])
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
                    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                    st.dataframe(processed_data.head(), use_container_width=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
                    st.subheader("‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ")
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI
                    def calculate_rsi(data, periods=14):
                        delta = data.diff()
                        gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()
                        loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()
                        rs = gain / loss
                        return 100 - (100 / (1 + rs))

                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
                    def calculate_ema(data, periods=20):
                        return data.ewm(span=periods, adjust=False).mean()

                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Bollinger Bands
                    def calculate_bollinger_bands(data, periods=20, std=2):
                        sma = data.rolling(window=periods).mean()
                        std_dev = data.rolling(window=periods).std()
                        upper_band = sma + (std_dev * std)
                        lower_band = sma - (std_dev * std)
                        return upper_band, sma, lower_band

                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
                    rsi = calculate_rsi(processed_data['close'])
                    ema = calculate_ema(processed_data['close'])
                    upper_band, sma, lower_band = calculate_bollinger_bands(processed_data['close'])

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
                    fig = go.Figure()
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
                    fig.add_trace(go.Scatter(
                        x=processed_data['timestamp'],
                        y=processed_data['close'],
                        name="Price",
                        line=dict(color='#00FF9D')
                    ))
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° EMA
                    fig.add_trace(go.Scatter(
                        x=processed_data['timestamp'],
                        y=ema,
                        name="EMA (20)",
                        line=dict(color='#FF6B6B')
                    ))
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° Bollinger Bands
                    fig.add_trace(go.Scatter(
                        x=processed_data['timestamp'],
                        y=upper_band,
                        name="Upper Band",
                        line=dict(color='#4ECDC4', dash='dash')
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=processed_data['timestamp'],
                        y=lower_band,
                        name="Lower Band",
                        line=dict(color='#4ECDC4', dash='dash'),
                        fill='tonexty'
                    ))
                    
                    fig.update_layout(
                        title="Technical Indicators",
                        yaxis_title="Price",
                        xaxis_title="Date",
                        height=600,
                        template="plotly_dark"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("RSI (14)", f"{rsi.iloc[-1]:.2f}")
                        st.metric("MACD", "Bullish" if ema.iloc[-1] > sma.iloc[-1] else "Bearish")
                    with col2:
                        st.metric("EMA (20)", f"{ema.iloc[-1]:,.2f}")
                        st.metric("SMA (50)", f"{sma.iloc[-1]:,.2f}")
                    with col3:
                        st.metric("Bollinger Bands", f"Upper: {upper_band.iloc[-1]:,.2f}")
                        st.metric("Lower Band", f"Lower: {lower_band.iloc[-1]:,.2f}")
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß")

        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/datasets")
            
    def model_training_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        st.title("ü§ñ ‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•
        @st.cache_data
        def load_models():
            models_path = Path(current_dir) / "models" / "saved_models"
            model_info = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dqn_btcusdt_5m
            dqn_path = models_path / "dqn_btcusdt_5m"
            if dqn_path.exists():
                for model_dir in dqn_path.iterdir():
                    if model_dir.is_dir():
                        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                        config_file = model_dir / "config.json"
                        if config_file.exists():
                            with open(config_file, 'r') as f:
                                config = json.load(f)
                        else:
                            config = {
                                "model_type": "DQN",
                                "symbol": "BTCUSDT",
                                "timeframe": "5m",
                                "created_at": model_dir.name
                            }
                        
                        model_info.append({
                            "name": model_dir.name,
                            "path": str(model_dir),
                            "config": config
                        })
            
            return model_info

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        def delete_model(model_path: str):
            try:
                shutil.rmtree(model_path)
                st.success(f"‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.cache_data.clear()
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
        def run_backtest(model_path: str):
            try:
                # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
                st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ backtest ‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name}...")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ backtest: {str(e)}")

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
        def continue_training(model_path: str, episodes: int):
            try:
                # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
                st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name} ‡∏≠‡∏µ‡∏Å {episodes} ‡∏£‡∏≠‡∏ö...")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°: {str(e)}")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•
        models = load_models()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        st.subheader("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
        if models:
            for model in models:
                with st.expander(f"üìÅ {model['name']}"):
                    st.json(model['config'])
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        if st.button(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•", key=f"load_{model['name']}"):
                            st.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• {model['name']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    
                    with col2:
                        if st.button(f"‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", key=f"continue_{model['name']}"):
                            episodes = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", min_value=1, max_value=1000, value=100, key=f"episodes_{model['name']}")
                            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", key=f"confirm_continue_{model['name']}"):
                                continue_training(model['path'], episodes)
                    
                    with col3:
                        if st.button(f"Backtest", key=f"backtest_{model['name']}"):
                            run_backtest(model['path'])
                    
                    with col4:
                        if st.button(f"‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•", key=f"delete_{model['name']}"):
                            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", key=f"confirm_delete_{model['name']}"):
                                delete_model(model['path'])
                                
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
                    if st.button(f"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å", key=f"details_{model['name']}"):
                        self.show_training_details(model)
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")

        # Sidebar configuration
        st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•
        model_type = st.sidebar.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•",
            ["Deep Q-Learning", "Policy Gradient", "Actor-Critic"]
        )

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        st.sidebar.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
        learning_rate = st.sidebar.slider("Learning Rate", 0.0001, 0.01, 0.001, 0.0001)
        batch_size = st.sidebar.slider("Batch Size", 32, 512, 64, 32)
        epochs = st.sidebar.slider("Epochs", 10, 1000, 100, 10)

        # Main content
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            st.line_chart({
                "Loss": [0.5, 0.4, 0.3, 0.2, 0.1],
                "Reward": [0.1, 0.2, 0.3, 0.4, 0.5]
            })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            progress = st.progress(0)
            for i in range(100):
                progress.progress(i + 1)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
            training_data = pd.DataFrame({
                "Epoch": range(1, 6),
                "Loss": [0.5, 0.4, 0.3, 0.2, 0.1],
                "Reward": [0.1, 0.2, 0.3, 0.4, 0.5],
                "Accuracy": [0.6, 0.7, 0.8, 0.85, 0.9]
            })
            st.dataframe(training_data)

        with col2:
            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏°‡πÄ‡∏î‡∏•")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            st.metric("Loss", "0.1")
            st.metric("Reward", "0.5")
            st.metric("Accuracy", "90%")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            st.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
            st.json({
                "model_type": model_type,
                "learning_rate": learning_rate,
                "batch_size": batch_size,
                "epochs": epochs
            })

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å", type="primary"):
                st.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        with col2:
            if st.button("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å"):
                st.warning("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        with col3:
            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    def show_training_details(self, model):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö popup"""
        st.title(f"üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å: {model['name']}")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        st.subheader("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        col1, col2 = st.columns(2)
        with col1:
            symbol = st.text_input("‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå", model['config'].get('symbol', 'BTCUSDT'), key=f"detail_symbol_{model['name']}")
            timeframe = st.selectbox(
                "‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤",
                ["1m", "5m", "15m", "30m", "1h", "4h", "1d"],
                index=["1m", "5m", "15m", "30m", "1h", "4h", "1d"].index(model['config'].get('timeframe', '5m')),
                key=f"detail_timeframe_{model['name']}"
            )
        with col2:
            start_date = st.date_input(
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                datetime.now() - timedelta(days=365),
                key=f"detail_start_date_{model['name']}"
            )
            end_date = st.date_input(
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
                datetime.now(),
                key=f"detail_end_date_{model['name']}"
            )
            
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô
        st.subheader("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô")
        col1, col2 = st.columns(2)
        with col1:
            episodes = st.number_input(
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô",
                min_value=100,
                max_value=10000,
                value=model['config'].get('episodes', 1000),
                step=100,
                key=f"detail_episodes_{model['name']}"
            )
            batch_size = st.number_input(
                "‡∏Ç‡∏ô‡∏≤‡∏î Batch",
                min_value=16,
                max_value=256,
                value=model['config'].get('batch_size', 64),
                step=16,
                key=f"detail_batch_size_{model['name']}"
            )
        with col2:
            learning_rate = st.number_input(
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
                min_value=0.0001,
                max_value=0.01,
                value=model['config'].get('learning_rate', 0.001),
                step=0.0001,
                format="%.4f",
                key=f"detail_learning_rate_{model['name']}"
            )
            discount_factor = st.number_input(
                "Discount Factor",
                min_value=0.8,
                max_value=0.99,
                value=model['config'].get('discount_factor', 0.95),
                step=0.01,
                key=f"detail_discount_factor_{model['name']}"
            )
            
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        st.subheader("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        col1, col2 = st.columns(2)
        with col1:
            initial_balance = st.number_input(
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                min_value=1000.0,
                max_value=1000000.0,
                value=model['config'].get('initial_balance', 10000.0),
                step=1000.0,
                key=f"detail_initial_balance_{model['name']}"
            )
        with col2:
            window_size = st.slider(
                "‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                min_value=5,
                max_value=50,
                value=model['config'].get('window_size', 10),
                step=5,
                key=f"detail_window_size_{model['name']}"
            )
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{model['config'].get('best_profit', 0):.2f}")
        with col2:
            st.metric("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞", f"{model['config'].get('win_rate', 0)*100:.2f}%")
        with col3:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", f"{model['config'].get('total_trades', 0)}")
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            y=model['config'].get('profit_history', [0]),
            name="‡∏Å‡∏≥‡πÑ‡∏£",
            line=dict(color='#00FF9D')
        ))
        fig.update_layout(
            title="‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∞‡∏™‡∏°",
            xaxis_title="‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î",
            yaxis_title="‡∏Å‡∏≥‡πÑ‡∏£",
            template="plotly_dark"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
        if st.button("‡∏õ‡∏¥‡∏î", key=f"close_details_{model['name']}"):
            st.experimental_rerun()

    def model_evaluation_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        st.title("üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•")

        # Sidebar
        st.sidebar.header("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        model_name = st.sidebar.selectbox(
            "‡πÇ‡∏°‡πÄ‡∏î‡∏•",
            ["DQN_Model_001", "PG_Model_002", "AC_Model_003"]
        )

        # Main content
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            dates = pd.date_range(start="2024-01-01", periods=100, freq="D")
            actual = pd.Series(range(100), index=dates)
            predicted = actual + pd.Series(range(-5, 95), index=dates)
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=dates, y=actual, name="Actual"))
            fig.add_trace(go.Scatter(x=dates, y=predicted, name="Predicted"))
            
            fig.update_layout(
                title="Actual vs Predicted",
                xaxis_title="Date",
                yaxis_title="Price",
                template="plotly_dark"
            )
            
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
            metrics = {
                "Accuracy": "85%",
                "Precision": "0.82",
                "Recall": "0.78",
                "F1 Score": "0.80",
                "MSE": "0.15",
                "MAE": "0.12"
            }
            
            for key, value in metrics.items():
                st.metric(key, value)

        # Confusion Matrix
        st.subheader("Confusion Matrix")
        confusion_matrix = pd.DataFrame({
            "Predicted Buy": [45, 15],
            "Predicted Sell": [10, 30]
        }, index=["Actual Buy", "Actual Sell"])

        st.dataframe(confusion_matrix)

        # Performance Metrics
        st.subheader("Performance Metrics")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Win Rate", "75%")
            st.metric("Profit Factor", "2.5")

        with col2:
            st.metric("Sharpe Ratio", "1.8")
            st.metric("Max Drawdown", "-15%")

        with col3:
            st.metric("Total Trades", "100")
            st.metric("Average Trade", "+2.5%")

        # Detailed Analysis
        st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
        analysis_data = pd.DataFrame({
            "Metric": ["Win Rate", "Profit Factor", "Sharpe Ratio", "Max Drawdown"],
            "Value": ["75%", "2.5", "1.8", "-15%"],
            "Benchmark": ["70%", "2.0", "1.5", "-20%"],
            "Status": ["Good", "Good", "Good", "Good"]
        })

        st.dataframe(analysis_data, use_container_width=True)

    def backtest_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        st.title("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")

        # Sidebar configuration
        st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        model = st.sidebar.selectbox(
            "‡πÇ‡∏°‡πÄ‡∏î‡∏•",
            ["DQN_Model_001", "PG_Model_002", "AC_Model_003"]
        )

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        start_date = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", pd.to_datetime("2024-01-01"))
        end_date = st.sidebar.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", pd.to_datetime("2024-03-01"))

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        st.sidebar.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
        initial_capital = st.sidebar.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (USDT)", 1000, 100000, 10000)
        commission = st.sidebar.slider("‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° (%)", 0.0, 1.0, 0.1, 0.01)

        # Main content
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü equity curve
            dates = pd.date_range(start=start_date, end=end_date)
            equity = pd.Series(range(len(dates)), index=dates) * 100 + initial_capital
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=dates, y=equity, name="Equity"))
            
            fig.update_layout(
                title="Equity Curve",
                xaxis_title="Date",
                yaxis_title="Equity (USDT)",
                template="plotly_dark"
            )
            
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            stats = {
                "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": "+25,000 USDT",
                "ROI": "+250%",
                "Win Rate": "65%",
                "Profit Factor": "2.5",
                "Max Drawdown": "-15%",
                "Sharpe Ratio": "1.8"
            }
            
            for key, value in stats.items():
                st.metric(key, value)

        # Trade History
        st.subheader("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        trades = pd.DataFrame({
            "Date": pd.date_range(start=start_date, periods=10),
            "Type": ["BUY", "SELL"] * 5,
            "Price": [45000, 46000, 44000, 47000, 43000, 48000, 42000, 49000, 41000, 50000],
            "Amount": [0.1] * 10,
            "P/L": [100, -50, 200, -100, 300, -150, 400, -200, 500, -250]
        })

        st.dataframe(trades, use_container_width=True)

        # Performance Analysis
        st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Average Win", "+200 USDT")
            st.metric("Average Loss", "-100 USDT")

        with col2:
            st.metric("Largest Win", "+500 USDT")
            st.metric("Largest Loss", "-250 USDT")

        with col3:
            st.metric("Total Trades", "100")
            st.metric("Average Trade", "+50 USDT")

        # Risk Metrics
        st.subheader("‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
        risk_data = pd.DataFrame({
            "Metric": ["Value at Risk (95%)", "Expected Shortfall", "Beta", "Alpha"],
            "Value": ["-5%", "-7%", "1.2", "0.8"],
            "Benchmark": ["-4%", "-6%", "1.0", "0.0"],
            "Status": ["Good", "Good", "Good", "Good"]
        })

        st.dataframe(risk_data, use_container_width=True)

    def live_trading_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå"""
        st.title("üíπ ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")

        # Sidebar configuration
        st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        model = st.sidebar.selectbox(
            "‡πÇ‡∏°‡πÄ‡∏î‡∏•",
            ["DQN_Model_001", "PG_Model_002", "AC_Model_003"]
        )

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        st.sidebar.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
        initial_capital = st.sidebar.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (USDT)", 1000, 100000, 10000)
        max_position = st.sidebar.slider("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (%)", 1, 100, 10)
        stop_loss = st.sidebar.slider("Stop Loss (%)", 1, 20, 5)
        take_profit = st.sidebar.slider("Take Profit (%)", 1, 50, 10)

        # Main content
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤
            dates = pd.date_range(start="2024-01-01", periods=100, freq="D")
            prices = pd.Series(range(100), index=dates)
            
            fig = go.Figure(data=[go.Candlestick(
                x=dates,
                open=prices,
                high=prices + 2,
                low=prices - 2,
                close=prices + 1
            )])
            
            fig.update_layout(
                title="BTC/USDT Price",
                yaxis_title="Price (USDT)",
                xaxis_title="Time",
                template="plotly_dark"
            )
            
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            status = {
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
                "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô": "Long",
                "‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á": "0.1 BTC",
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "45,000 USDT",
                "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô": "+500 USDT",
                "ROI": "+5%"
            }
            
            for key, value in status.items():
                st.metric(key, value)

        # Active Orders
        st.subheader("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        orders = pd.DataFrame({
            "Time": [datetime.now()] * 3,
            "Type": ["BUY", "SELL", "BUY"],
            "Price": [45000, 46000, 44000],
            "Amount": [0.1, 0.1, 0.1],
            "Status": ["FILLED", "OPEN", "OPEN"]
        })

        st.dataframe(orders, use_container_width=True)

        # Performance Metrics
        st.subheader("‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Win Rate", "65%")
            st.metric("Profit Factor", "2.5")

        with col2:
            st.metric("Total Trades", "10")
            st.metric("Active Trades", "2")

        with col3:
            st.metric("Daily P/L", "+1,000 USDT")
            st.metric("Monthly P/L", "+20,000 USDT")

        # Control Panel
        st.subheader("‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", type="primary"):
                st.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
        with col2:
            if st.button("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"):
                st.warning("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        with col3:
            if st.button("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"):
                st.success("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö")

        # System Status
        st.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
        status_data = pd.DataFrame({
            "Component": ["API Connection", "Data Feed", "Model", "Order Execution"],
            "Status": ["Connected", "Running", "Active", "Ready"],
            "Last Update": [datetime.now()] * 4,
            "Health": ["Good", "Good", "Good", "Good"]
        })

        st.dataframe(status_data, use_container_width=True)

    def settings_page(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        st.title("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

        # API Settings
        st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Binance API")
            binance_api_key = st.text_input("API Key", type="password")
            binance_api_secret = st.text_input("API Secret", type="password")
            
            if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Binance"):
                st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")

        with col2:
            st.subheader("Telegram API")
            telegram_token = st.text_input("Bot Token", type="password")
            telegram_chat_id = st.text_input("Chat ID")
            
            if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram"):
                st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")

        # Trading Settings
        st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
            trading_pairs = st.multiselect(
                "‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
                ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT"],
                default=["BTC/USDT"]
            )
            
            timeframes = st.multiselect(
                "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                ["1m", "5m", "15m", "1h", "4h", "1d"],
                default=["1h"]
            )
            
            max_open_trades = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", 1, 10, 3)

        with col2:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
            max_daily_trades = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", 1, 100, 10)
            max_daily_loss = st.number_input("‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (%)", 1, 100, 5)
            stop_loss = st.number_input("Stop Loss (%)", 1, 20, 5)
            take_profit = st.number_input("Take Profit (%)", 1, 50, 10)

        # Model Settings
        st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•")
            model_type = st.selectbox(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•",
                ["Deep Q-Learning", "Policy Gradient", "Actor-Critic"]
            )
            
            learning_rate = st.slider("Learning Rate", 0.0001, 0.01, 0.001, 0.0001)
            batch_size = st.slider("Batch Size", 32, 512, 64, 32)
            epochs = st.slider("Epochs", 10, 1000, 100, 10)

        with col2:
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å")
            validation_split = st.slider("Validation Split", 0.1, 0.5, 0.2, 0.1)
            early_stopping = st.checkbox("Early Stopping", value=True)
            if early_stopping:
                patience = st.number_input("Patience", 1, 50, 10)

        # Notification Settings
        st.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram")
            notify_trades = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", value=True)
            notify_errors = st.checkbox("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", value=True)
            notify_daily = st.checkbox("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", value=True)

        with col2:
            st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
            email_enabled = st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
            if email_enabled:
                email_address = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
                email_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

        # Save Settings
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", type="primary"):
            settings = {
                "api": {
                    "binance": {
                        "api_key": binance_api_key,
                        "api_secret": binance_api_secret
                    },
                    "telegram": {
                        "token": telegram_token,
                        "chat_id": telegram_chat_id
                    }
                },
                "trading": {
                    "pairs": trading_pairs,
                    "timeframes": timeframes,
                    "max_open_trades": max_open_trades,
                    "max_daily_trades": max_daily_trades,
                    "max_daily_loss": max_daily_loss,
                    "stop_loss": stop_loss,
                    "take_profit": take_profit
                },
                "model": {
                    "type": model_type,
                    "learning_rate": learning_rate,
                    "batch_size": batch_size,
                    "epochs": epochs,
                    "validation_split": validation_split,
                    "early_stopping": early_stopping,
                    "patience": patience if early_stopping else None
                },
                "notifications": {
                    "telegram": {
                        "trades": notify_trades,
                        "errors": notify_errors,
                        "daily": notify_daily
                    },
                    "email": {
                        "enabled": email_enabled,
                        "address": email_address if email_enabled else None,
                        "password": email_password if email_enabled else None
                    }
                }
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            settings_file = Path(current_dir) / "config" / "settings.json"
            with open(settings_file, "w") as f:
                json.dump(settings, f, indent=4)
            
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit theme
st.set_page_config(
    page_title="Crypto Trading Bot",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ custom CSS
st.markdown("""
<style>
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏•‡∏±‡∏Å */
    .stApp {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */
    h1, h2, h3, h4, h5, h6 {
        color: #00FF9D !important;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô sidebar */
    .css-1d391kg {
        background-color: #262730;
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô tabs */
    .stTabs [data-baseweb="tab-list"] {
        background-color: #262730;
    }
    
    .stTabs [data-baseweb="tab"] {
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô selectbox */
    .stSelectbox label {
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô number input */
    .stNumberInput label {
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô date input */
    .stDateInput label {
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô button */
    .stButton button {
        background-color: #00FF9D;
        color: #0E1117;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô metric */
    .stMetric label {
        color: #FAFAFA;
    }
    
    .stMetric div {
        color: #00FF9D;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô dataframe */
    .stDataFrame {
        color: #FAFAFA;
    }
    
    /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô plot */
    .stPlotlyChart {
        color: #FAFAFA;
    }
</style>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    navigator = Navigator()
    navigator.render() 