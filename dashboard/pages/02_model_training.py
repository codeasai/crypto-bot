import streamlit as st
import pandas as pd
from pathlib import Path
import sys
import glob
import json
import os
import shutil

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

st.set_page_config(
    page_title="Model Training",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_data
def load_models():
    models_path = project_root / "models" / "saved_models"
    model_info = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dqn_btcusdt_5m
    dqn_path = models_path / "dqn_btcusdt_5m"
    if dqn_path.exists():
        for model_dir in dqn_path.iterdir():
            if model_dir.is_dir():
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                config_file = model_dir / "config.json"
                if config_file.exists():
                    with open(config_file, 'r') as f:
                        config = json.load(f)
                else:
                    config = {
                        "model_type": "DQN",
                        "symbol": "BTCUSDT",
                        "timeframe": "5m",
                        "created_at": model_dir.name
                    }
                
                model_info.append({
                    "name": model_dir.name,
                    "path": str(model_dir),
                    "config": config
                })
    
    return model_info

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
def delete_model(model_path: str):
    try:
        shutil.rmtree(model_path)
        st.success(f"‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.cache_data.clear()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
def run_backtest(model_path: str):
    try:
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
        st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ backtest ‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name}...")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ backtest: {str(e)}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
def continue_training(model_path: str, episodes: int):
    try:
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
        st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• {Path(model_path).name} ‡∏≠‡∏µ‡∏Å {episodes} ‡∏£‡∏≠‡∏ö...")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°: {str(e)}")

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•
models = load_models()

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
st.subheader("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
if models:
    for model in models:
        with st.expander(f"üìÅ {model['name']}"):
            st.json(model['config'])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•", key=f"load_{model['name']}"):
                    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• {model['name']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            with col2:
                if st.button(f"‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", key=f"continue_{model['name']}"):
                    episodes = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", min_value=1, max_value=1000, value=100, key=f"episodes_{model['name']}")
                    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", key=f"confirm_continue_{model['name']}"):
                        continue_training(model['path'], episodes)
            
            with col3:
                if st.button(f"Backtest", key=f"backtest_{model['name']}"):
                    run_backtest(model['path'])
            
            with col4:
                if st.button(f"‡∏•‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•", key=f"delete_{model['name']}"):
                    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", key=f"confirm_delete_{model['name']}"):
                        delete_model(model['path'])
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")

# Sidebar configuration
st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•
model_type = st.sidebar.selectbox(
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•",
    ["Deep Q-Learning", "Policy Gradient", "Actor-Critic"]
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
st.sidebar.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
learning_rate = st.sidebar.slider("Learning Rate", 0.0001, 0.01, 0.001, 0.0001)
batch_size = st.sidebar.slider("Batch Size", 32, 512, 64, 32)
epochs = st.sidebar.slider("Epochs", 10, 1000, 100, 10)

# Main content
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    st.line_chart({
        "Loss": [0.5, 0.4, 0.3, 0.2, 0.1],
        "Reward": [0.1, 0.2, 0.3, 0.4, 0.5]
    })
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    progress = st.progress(0)
    for i in range(100):
        progress.progress(i + 1)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    training_data = pd.DataFrame({
        "Epoch": range(1, 6),
        "Loss": [0.5, 0.4, 0.3, 0.2, 0.1],
        "Reward": [0.1, 0.2, 0.3, 0.4, 0.5],
        "Accuracy": [0.6, 0.7, 0.8, 0.85, 0.9]
    })
    st.dataframe(training_data)

with col2:
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    st.metric("Loss", "0.1")
    st.metric("Reward", "0.5")
    st.metric("Accuracy", "90%")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    st.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    st.json({
        "model_type": model_type,
        "learning_rate": learning_rate,
        "batch_size": batch_size,
        "epochs": epochs
    })

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å", type="primary"):
        st.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
with col2:
    if st.button("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å"):
        st.warning("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
with col3:
    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") 